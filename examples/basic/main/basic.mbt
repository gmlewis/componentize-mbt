// Generated by `wit-bindgen` 0.1.0. DO NOT EDIT!

// export_name = "hello"
pub fn __export_hello(arg0 : Int, arg1 : Int) -> Unit {
  let str0 = _mbt_unsafe_make_string(arg1, 0)
  _rael_memory_copy(_mbt_string_data(str0), arg0, arg1)
  guest_impl.t0.unwrap().hello(str0)
}

pub trait Guest {
  /// Say hello to a specified person
  hello(Self, String) -> Unit
}

pub(readonly) struct Fantix {
  examples : FantixExamples
}

pub(readonly) struct FantixExamples {
  stdio : FantixExamplesStdio
}

pub(readonly) type FantixExamplesStdio Unit

/// Print a line of text to standard output
pub fn println(self : FantixExamplesStdio, line : String) -> Unit {
  ffi_fantix_examples_stdio_println(_mbt_string_data(line), line.length())
}

fn ffi_fantix_examples_stdio_println(p0 : Int, p1 : Int) = "fantix:examples/stdio" "println"

pub let fantix : Fantix = { examples: { stdio: FantixExamplesStdio(()) } }

struct GuestImpl {
  mut t0 : Guest?
} derive(Default)

let guest_impl : GuestImpl = GuestImpl::default()

pub fn init_guest[T : Guest](guest : T) -> Unit {
  guest_impl.t0 = Some(guest as Guest)
}

fn _mbt_string_data(s : String) -> Int = "$moonbit.string_data"

fn _mbt_unsafe_make_string(len : Int, val : Int) -> String = "$moonbit.unsafe_make_string"

fn _rael_memory_copy(dst : Int, src : Int, len : Int) = "$rael.memory_copy"
