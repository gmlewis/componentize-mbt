package extism:host;

interface env {
  /// `input_length` returns the number of (unprocessed) bytes provided by the host via its input methods.
  /// The user of this PDK will typically not call this method directly.
  input_length: func() -> s64;

  /// `input_load_u8` returns the byte at location `offset` of the "input" data from the host.
  /// The user of this PDK will typically not call this method directly.
  input_load_u8: func(offset: s64) -> u8;

  /// `input_load_u64` returns the 64-bit unsigned integer of the "input" data from the host.
  /// Note that MoonBit has no unsigned integers,
  /// so the result is returned as an s64.
  /// Also note that `offset` must lie on an 8-byte boundary.
  /// The user of this PDK will typically not call this method directly.
  input_load_u64: func(offset: s64) -> s64;

  /// `length` returns the number of bytes associated with the block of host memory
  /// located at `offset`.
  /// The user of this PDK will typically not call this method directly.
  length: func(offset: s64) -> s64;

  /// `alloc` allocates `length` bytes of data with host memory for use by the plugin
  /// and returns its `offset` within the host memory block.
  /// The user of this PDK will typically not call this method directly.
  alloc: func(length: s64) -> s64;

  /// `free` releases the bytes previously allocated with `alloc` at the given `offset`.
  /// The user of this PDK will typically not call this method directly.
  free: func(offset: s64);

  /// `output_set` sets the "output" data from the plugin to the host to be the memory that
  /// has been written at `offset` with the given `length`.
  /// The user of this PDK will typically not call this method directly.
  output_set: func(offset: s64, length: s64);

  /// `error_set` sets the "error" data from the plugin to the host to be the memory that
  /// has been written at `offset`.
  /// The user of this PDK will typically not call this method directly.
  error_set: func(offset: s64);

  /// `config_get` returns the host memory block offset for the "config" data associated with
  /// the key which is represented by the UTF-8 string which as been previously
  /// written at `offset`.
  /// The user of this PDK will typically not call this method directly.
  config_get: func(offset: s64) -> s64;

  /// `var_get` returns the host memory block offset for the "var" data associated with
  /// the key which is represented by the UTF-8 string which as been previously
  /// written at `offset`.
  /// The user of this PDK will typically not call this method directly.
  var_get: func(offset: s64) -> s64;

  /// `var_set` sets the host "var" memory keyed by the UTF-8 string located at `offset`
  /// to be the value which has been previously written at `value_offset`.
  /// The user of this PDK will typically not call this method directly.
  var_set: func(offset: s64, value_offset: s64);

  /// `store_u8` stores the byte `b` at location `offset` in the host memory block.
  /// The user of this PDK will typically not call this method directly.
  store_u8: func(offset: s64, b: u8);

  /// `load_u8` returns the byte located at `offset` in the host memory block.
  /// The user of this PDK will typically not call this method directly.
  load_u8: func(offset: s64) -> u8;

  /// `store_u64` stores the s64 value `v` at location `offset` in the host memory block.
  /// Note that MoonBit does not have unsigned integers, but the host interprets
  /// the provided `v` value as an unsigned 64-bit integer.
  /// Also note that `offset` must lie on an 8-byte boundary.
  /// The user of this PDK will typically not call this method directly.
  store_u64: func(offset: s64, v: s64);

  /// `load_u64` returns the 64-bit unsigned integer at location `offset` in the host memory block.
  /// Note that MoonBit has no unsigned integers,
  /// so the result is returned as an s64.
  /// Also note that `offset` must lie on an 8-byte boundary.
  /// The user of this PDK will typically not call this method directly.
  load_u64: func(offset: s64) -> s64;

  /// `http_request` sends the HTTP request to the Extism host and returns back the
  /// memory offset to the response body.
  http_request: func(req: s64, body: s64) -> s64;

  /// `http_status_code` returns the status code for the last-sent `http_request` call.
  http_status_code: func() -> s32;

  /// `log_warn` logs a "warning" string to the host from the previously-written UTF-8 string written to `offset`.
  /// The user of this PDK will typically not call this method directly.
  log_warn: func(offset: s64);

  /// `log_info` logs an "info" string to the host from the previously-written UTF-8 string written to `offset`.
  /// The user of this PDK will typically not call this method directly.
  log_info: func(offset: s64);

  /// `log_debug` logs a "debug" string to the host from the previously-written UTF-8 string written to `offset`.
  /// The user of this PDK will typically not call this method directly.
  log_debug: func(offset: s64);

  /// `log_error` logs an "error" string to the host from the previously-written UTF-8 string written to `offset`.
  /// The user of this PDK will typically not call this method directly.
  log_error: func(offset: s64);
}

world extism {
  import env;
}
